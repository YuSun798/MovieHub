{"ast":null,"code":"import _slicedToArray from\"/Users/sunyu/Desktop/Projects/MovieHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/Users/sunyu/Desktop/Projects/MovieHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React,{useReducer,useEffect}from\"react\";import\"./App.css\";import Header from\"./Header\";import Movie from\"./Movie\";import Search from\"./Search\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var MOVIE_API_URL=\"https://www.omdbapi.com/?s=man&apikey=4a3b711b\";// you should replace this with yours\nvar initialState={loading:true,movies:[],errorMessage:null};var reducer=function reducer(state,action){//reducer：根据action不同，怎么改state//redux\nswitch(action.type){case\"SEARCH_MOVIES_REQUEST\"://action\n//updates our state object\nreturn _objectSpread(_objectSpread({},state),{},{//改state\nloading:true,errorMessage:null});case\"SEARCH_MOVIES_SUCCESS\"://dispatch another action with the type SEARCH_MOVIES_SUCCESS that updates our state object making loading=false and movies = action.payload where the payload is the movies array gotten from OMDB.\nreturn _objectSpread(_objectSpread({},state),{},{loading:false,movies:action.payload});case\"SEARCH_MOVIES_FAILURE\":return _objectSpread(_objectSpread({},state),{},{loading:false,errorMessage:action.error});default:return state;}};//the second hooks API: useEffect\n/*\n    useEffect Hook as componentDidMount, componentDidUpdate, and componentWillUnmount combined\n    perform side effects as data fetching, subscriptions, and manual DOM manipulations\n    */ //after 1st render componentDidMount and every update componentDidUpdate\n/* useEffect 相当于：\n   // for class components\n      componentDidUpdate(prevProps, prevState) {\n        if (prevState.count !== this.state.count) {\n          document.title = `You clicked ${this.state.count} times`;\n        }\n      }\n  // using hooks it will become\n      useEffect(() => {\n        document.title = `You clicked ${count} times`;\n      }, [count]); // Only re-run the effect if count changes\n   */var App=function App(){var _useReducer=useReducer(reducer,initialState),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];useEffect(function(){fetch(MOVIE_API_URL).then(function(response){return response.json();}).then(function(jsonResponse){dispatch({type:\"SEARCH_MOVIES_SUCCESS\",payload:jsonResponse.Search});});},[]);var search=function search(searchValue){dispatch({type:\"SEARCH_MOVIES_REQUEST\"});fetch(\"https://www.omdbapi.com/?s=\".concat(searchValue,\"&apikey=4a3b711b\")).then(function(response){return response.json();}).then(function(jsonResponse){if(jsonResponse.Response===\"True\"){dispatch({type:\"SEARCH_MOVIES_SUCCESS\",payload:jsonResponse.Search//action -> object\n});}else{dispatch({type:\"SEARCH_MOVIES_FAILURE\",error:jsonResponse.Error});}});};var movies=state.movies,errorMessage=state.errorMessage,loading=state.loading;return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(Header,{text:\"MOVIE HUB\"}),/*#__PURE__*/_jsx(Search,{search:search}),/*#__PURE__*/_jsx(\"p\",{className:\"App-intro\",children:\"Sharing a few of our favourite movies\"}),/*#__PURE__*/_jsx(\"div\",{className:\"movies\",children:loading&&!errorMessage?/*#__PURE__*/_jsx(\"span\",{children:\"loading... \"}):errorMessage?/*#__PURE__*/_jsx(\"div\",{className:\"errorMessage\",children:errorMessage}):movies.map(function(movie,index){return/*#__PURE__*/_jsx(Movie,{movie:movie},\"\".concat(index,\"-\").concat(movie.Title));})})]});};export default App;","map":{"version":3,"sources":["/Users/sunyu/Desktop/Projects/MovieHub/src/components/App.js"],"names":["React","useReducer","useEffect","Header","Movie","Search","MOVIE_API_URL","initialState","loading","movies","errorMessage","reducer","state","action","type","payload","error","App","dispatch","fetch","then","response","json","jsonResponse","search","searchValue","Response","Error","map","movie","index","Title"],"mappings":"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","sourcesContent":["import React, { useReducer, useEffect } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport Movie from \"./Movie\";\nimport Search from \"./Search\";\n\nconst MOVIE_API_URL = \"https://www.omdbapi.com/?s=man&apikey=4a3b711b\"; // you should replace this with yours\n\nconst initialState = {\n  loading: true,\n  movies: [],\n  errorMessage: null\n};\n\nconst reducer = (state, action) => {//reducer：根据action不同，怎么改state//redux\n  switch (action.type) {\n    case \"SEARCH_MOVIES_REQUEST\"://action\n      //updates our state object\n      return {\n        ...state,//改state\n        loading: true,\n        errorMessage: null\n      };\n    case \"SEARCH_MOVIES_SUCCESS\":\n      //dispatch another action with the type SEARCH_MOVIES_SUCCESS that updates our state object making loading=false and movies = action.payload where the payload is the movies array gotten from OMDB.\n      return {\n        ...state,\n        loading: false,\n        movies: action.payload\n      };\n    case \"SEARCH_MOVIES_FAILURE\":\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.error\n      };\n    default:\n      return state;\n  }\n};\n\n//the second hooks API: useEffect\n    /*\n    useEffect Hook as componentDidMount, componentDidUpdate, and componentWillUnmount combined\n    perform side effects as data fetching, subscriptions, and manual DOM manipulations\n    */\n   //after 1st render componentDidMount and every update componentDidUpdate\n   /* useEffect 相当于：\n   // for class components\n      componentDidUpdate(prevProps, prevState) {\n        if (prevState.count !== this.state.count) {\n          document.title = `You clicked ${this.state.count} times`;\n        }\n      }\n  // using hooks it will become\n      useEffect(() => {\n        document.title = `You clicked ${count} times`;\n      }, [count]); // Only re-run the effect if count changes\n   */\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n    useEffect(() => {\n        fetch(MOVIE_API_URL)\n            .then(response => response.json())\n            .then(jsonResponse => {\n        \n            dispatch({\n                type: \"SEARCH_MOVIES_SUCCESS\",\n                payload: jsonResponse.Search\n        \t});\n      \t});\n  \t}, []);\n\n    const search = searchValue => {\n    \tdispatch({\n      \ttype: \"SEARCH_MOVIES_REQUEST\"\n    \t});\n        fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`)\n      \t.then(response => response.json())\n      \t.then(jsonResponse => {\n        \tif (jsonResponse.Response === \"True\") {\n          \tdispatch({\n                type: \"SEARCH_MOVIES_SUCCESS\",\n                payload: jsonResponse.Search//action -> object\n          \t});\n        \t} else {\n          \tdispatch({\n                type: \"SEARCH_MOVIES_FAILURE\",\n                error: jsonResponse.Error\n          \t});\n          }\n      \t});\n\t  };\n\n    const { movies, errorMessage, loading } = state;\n\n    return (\n    <div className=\"App\">\n      <Header text=\"MOVIE HUB\" />\n      <Search search={search} />\n      <p className=\"App-intro\">Sharing a few of our favourite movies</p>\n      <div className=\"movies\">\n        {loading && !errorMessage ? (\n          <span>loading... </span>\n        ) : errorMessage ? (\n          <div className=\"errorMessage\">{errorMessage}</div>\n        ) : (\n          movies.map((movie, index) => (\n            <Movie key={`${index}-${movie.Title}`} movie={movie} />\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}