{"ast":null,"code":"import _slicedToArray from\"/Users/sunyu/Desktop/Projects/MovieHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Search=function Search(props){//in the past, in order to handle internal state, we would have to create a class component\n//with hooks we can have a functional component handle its own internal state\nvar _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),searchValue=_useState2[0],setSearchValue=_useState2[1];//useState is a hooks API, accepts one argument which is the initial state, and then it returns an array containing the current state????\nvar handleSearchInputChanges=function handleSearchInputChanges(e){setSearchValue(e.target.value);//e输入框中的值给searchValue\n};var resetInputField=function resetInputField(){setSearchValue(\"\");//重制\n};var callSearchFunction=function callSearchFunction(e){e.preventDefault();props.search(searchValue);resetInputField();};return/*#__PURE__*/_jsxs(\"form\",{className:\"search\",children:[/*#__PURE__*/_jsx(\"input\",{value:searchValue,onChange:handleSearchInputChanges,type:\"text\"}),/*#__PURE__*/_jsx(\"input\",{onClick:callSearchFunction,type:\"submit\",value:\"SEARCH\"})]});};export default Search;","map":{"version":3,"sources":["/Users/sunyu/Desktop/Projects/MovieHub/src/components/Search.js"],"names":["React","useState","Search","props","searchValue","setSearchValue","handleSearchInputChanges","e","target","value","resetInputField","callSearchFunction","preventDefault","search"],"mappings":"6JAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,C,wFAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,KAAD,CAAW,CAC1B;AACA;AACE,cAAsCF,QAAQ,CAAC,EAAD,CAA9C,wCAAOG,WAAP,eAAoBC,cAApB,eAAmD;AACnD,GAAMC,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,CAACC,CAAD,CAAO,CACtCF,cAAc,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd,CAA+B;AAChC,CAFD,CAIA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CAC5BL,cAAc,CAAC,EAAD,CAAd,CAAkB;AACnB,CAFD,CAIA,GAAMM,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACJ,CAAD,CAAO,CAChCA,CAAC,CAACK,cAAF,GACAT,KAAK,CAACU,MAAN,CAAaT,WAAb,EACAM,eAAe,GAChB,CAJD,CAMA,mBACI,cAAM,SAAS,CAAC,QAAhB,wBACE,cACE,KAAK,CAAEN,WADT,CAEE,QAAQ,CAAEE,wBAFZ,CAGE,IAAI,CAAC,MAHP,EADF,cAME,cAAO,OAAO,CAAEK,kBAAhB,CAAoC,IAAI,CAAC,QAAzC,CAAkD,KAAK,CAAC,QAAxD,EANF,GADJ,CAUD,CA5BD,CA8BA,cAAeT,CAAAA,MAAf","sourcesContent":["import React, { useState } from \"react\";\n\nconst Search = (props) => {\n//in the past, in order to handle internal state, we would have to create a class component\n//with hooks we can have a functional component handle its own internal state\n  const [searchValue, setSearchValue] = useState(\"\");//useState is a hooks API, accepts one argument which is the initial state, and then it returns an array containing the current state????\n  const handleSearchInputChanges = (e) => {\n    setSearchValue(e.target.value);//e输入框中的值给searchValue\n  }\n\n  const resetInputField = () => {\n    setSearchValue(\"\")//重制\n  }\n\n  const callSearchFunction = (e) => {\n    e.preventDefault();\n    props.search(searchValue);\n    resetInputField();\n  }\n\n  return (\n      <form className=\"search\">\n        <input\n          value={searchValue}\n          onChange={handleSearchInputChanges}\n          type=\"text\"\n        />\n        <input onClick={callSearchFunction} type=\"submit\" value=\"SEARCH\" />\n      </form>\n    );\n}\n\nexport default Search;"]},"metadata":{},"sourceType":"module"}