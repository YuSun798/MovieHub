{"ast":null,"code":"var _jsxFileName = \"/Users/sunyu/Desktop/Projects/MovieHub/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport Movie from \"./Movie\";\nimport Search from \"./Search\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MOVIE_API_URL = \"http://www.omdbapi.com/?i=tt3896198&apikey=6528784a\"; // you should replace this with yours\n\nconst initialState = {\n  loading: true,\n  movies: [],\n  errorMessage: null\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SEARCH_MOVIES_REQUEST\":\n      return { ...state,\n        loading: true,\n        errorMessage: null\n      };\n\n    case \"SEARCH_MOVIES_SUCCESS\":\n      return { ...state,\n        loading: false,\n        movies: action.payload\n      };\n\n    case \"SEARCH_MOVIES_FAILURE\":\n      return { ...state,\n        loading: false,\n        errorMessage: action.error\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst App = () => {\n  _s();\n\n  const [loading, setLoading] = useState(true); //1. useState for loading\n\n  const [movies, setMovies] = useState([]); //2. movie array\n\n  const [errorMessage, setErrorMessage] = useState(null); //3. error\n\n  useEffect(() => {\n    fetch(MOVIE_API_URL).then(response => response.json()).then(jsonResponse => {\n      setMovies(jsonResponse.Search);\n      setLoading(false);\n    });\n  }, []);\n\n  const search = searchValue => {\n    setLoading(true);\n    setErrorMessage(null);\n    fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`).then(response => response.json()).then(jsonResponse => {\n      if (jsonResponse.Response === \"True\") {\n        setMovies(jsonResponse.Search);\n        setLoading(false);\n      } else {\n        setErrorMessage(jsonResponse.Error);\n        setLoading(false);\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      text: \"HOOKED\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Search, {\n      search: search\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"App-intro\",\n      children: \"Sharing a few of our favourite movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movies\",\n      children: loading && !errorMessage ? /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 10\n      }, this) : errorMessage ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"errorMessage\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this) : movies.map((movie, index) => /*#__PURE__*/_jsxDEV(Movie, {\n        movie: movie\n      }, `${index}-${movie.Title}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 6\n  }, this);\n};\n\n_s(App, \"hSD2JYgtHOfqws9SBamg3OT7G98=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sunyu/Desktop/Projects/MovieHub/src/components/App.js"],"names":["React","useState","useEffect","Header","Movie","Search","MOVIE_API_URL","initialState","loading","movies","errorMessage","reducer","state","action","type","payload","error","App","setLoading","setMovies","setErrorMessage","fetch","then","response","json","jsonResponse","search","searchValue","Response","Error","map","movie","index","Title"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport Movie from \"./Movie\";\nimport Search from \"./Search\";\n\nconst MOVIE_API_URL = \"http://www.omdbapi.com/?i=tt3896198&apikey=6528784a\"; // you should replace this with yours\n\nconst initialState = {\n  loading: true,\n  movies: [],\n  errorMessage: null\n};\n\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SEARCH_MOVIES_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        errorMessage: null\n      };\n    case \"SEARCH_MOVIES_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        movies: action.payload\n      };\n    case \"SEARCH_MOVIES_FAILURE\":\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.error\n      };\n    default:\n      return state;\n  }\n};\n\nconst App = () => {\n  const [loading, setLoading] = useState(true);//1. useState for loading\n  const [movies, setMovies] = useState([]);//2. movie array\n  const [errorMessage, setErrorMessage] = useState(null);//3. error\n\n    useEffect(() => {\n    fetch(MOVIE_API_URL)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        setMovies(jsonResponse.Search);\n        setLoading(false);\n      });\n  }, []);\n\n    const search = searchValue => {\n    setLoading(true);\n    setErrorMessage(null);\n\n    fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        if (jsonResponse.Response === \"True\") {\n          setMovies(jsonResponse.Search);\n          setLoading(false);\n        } else {\n          setErrorMessage(jsonResponse.Error);\n          setLoading(false);\n        }\n      });\n  \t};\n\n    \n    return (\n     <div className=\"App\">\n      <Header text=\"HOOKED\" />\n      <Search search={search} />\n      <p className=\"App-intro\">Sharing a few of our favourite movies</p>\n      <div className=\"movies\">\n        {loading && !errorMessage ? (\n         <span>loading...</span>\n         ) : errorMessage ? (\n          <div className=\"errorMessage\">{errorMessage}</div>\n        ) : (\n          movies.map((movie, index) => (\n            <Movie key={`${index}-${movie.Title}`} movie={movie} />\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}