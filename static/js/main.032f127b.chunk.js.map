{"version":3,"sources":["components/Header.js","components/Movie.js","components/Search.js","components/App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","text","Movie","movie","poster","Poster","Title","width","alt","src","Year","Search","useState","searchValue","setSearchValue","value","onChange","e","target","type","onClick","preventDefault","search","initialState","loading","movies","errorMessage","reducer","state","action","payload","error","App","useReducer","dispatch","useEffect","fetch","then","response","json","jsonResponse","Response","Error","map","index","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAUeA,EARA,SAACC,GACd,OACE,wBAAQC,UAAU,aAAlB,SACE,6BAAKD,EAAME,UCoBFC,EApBD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACTC,EACa,QAAjBD,EAAME,OALR,qGAKuDF,EAAME,OAC7D,OAEE,cADA,CACA,OAAKL,UAAU,QAAf,UACE,6BAAKG,EAAMG,QACX,8BACE,qBACEC,MAAM,MACNC,IAAG,4BAAuBL,EAAMG,OAChCG,IAAKL,MAGT,kCAAKD,EAAMO,KAAX,WCaSC,EA9BA,SAACZ,GAGd,MAAsCa,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAeA,OACI,uBAAMd,UAAU,SAAhB,UACE,uBACEe,MAAOF,EACPG,SAlByB,SAACC,GAChCH,EAAeG,EAAEC,OAAOH,QAkBlBI,KAAK,SAEP,uBAAOC,QAbc,SAACH,GAC1BA,EAAEI,iBACFtB,EAAMuB,OAAOT,GALbC,EAAe,KAgByBK,KAAK,SAASJ,MAAM,eCnB1DQ,EAAe,CACnBC,SAAS,EACTC,OAAQ,GACRC,aAAc,MAGVC,EAAU,SAACC,EAAOC,GACtB,OAAQA,EAAOV,MACb,IAAK,wBAEH,OAAO,2BACFS,GADL,IAEEJ,SAAS,EACTE,aAAc,OAElB,IAAK,wBAEH,OAAO,2BACFE,GADL,IAEEJ,SAAS,EACTC,OAAQI,EAAOC,UAEnB,IAAK,wBACH,OAAO,2BACFF,GADL,IAEEJ,SAAS,EACTE,aAAcG,EAAOE,QAEzB,QACE,OAAOH,IA+EEI,EAzDH,WACV,MAA0BC,qBAAWN,EAASJ,GAA9C,mBAAOK,EAAP,KAAcM,EAAd,KACEC,qBAAU,WACNC,MAxDc,kDAyDTC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAENN,EAAS,CACLf,KAAM,wBACNW,QAASU,EAAa7B,cAGhC,IAEF,IAqBQc,EAAkCG,EAAlCH,OAAQC,EAA0BE,EAA1BF,aAAcF,EAAYI,EAAZJ,QAE9B,OACA,sBAAKxB,UAAU,MAAf,UACE,cAAC,EAAD,CAAQC,KAAK,cACb,cAAC,EAAD,CAAQqB,OA1BK,SAAAT,GACdqB,EAAS,CACPf,KAAM,0BAELiB,MAAM,8BAAD,OAA+BvB,EAA/B,qBACLwB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAC0B,SAA1BA,EAAaC,SACfP,EAAS,CACJf,KAAM,wBACNW,QAASU,EAAa7B,SAG3BuB,EAAS,CACJf,KAAM,wBACNY,MAAOS,EAAaE,cAY9B,mBAAG1C,UAAU,YAAb,mDACA,qBAAKA,UAAU,SAAf,SACGwB,IAAYE,EACX,+CACEA,EACF,qBAAK1B,UAAU,eAAf,SAA+B0B,IAE/BD,EAAOkB,KAAI,SAACxC,EAAOyC,GAAR,OACT,cAAC,EAAD,CAAuCzC,MAAOA,GAA9C,UAAeyC,EAAf,YAAwBzC,EAAMG,iBChG3BuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.032f127b.chunk.js","sourcesContent":["import React from \"react\";\n//basically a functional component that renders the header tag with the text props.\nconst Header = (props) => {\n  return (\n    <header className=\"App-header\">\n      <h2>{props.text}</h2>\n    </header>\n  );\n};\n\nexport default Header;","import React from \"react\";\nconst DEFAULT_PLACEHOLDER_IMAGE =\n  \"https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg\";\n//because some movies retrieved from the API do not have images, so we will render a placeholder image instead of a broken link.\n\nconst Movie = ({ movie }) => {\n  const poster =\n    movie.Poster === \"N/A\" ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;\n  return (\n    //render movie title, image, and year\n    <div className=\"movie\">\n      <h2>{movie.Title}</h2>\n      <div>\n        <img\n          width=\"200\"\n          alt={`The movie titled: ${movie.Title}`}\n          src={poster}\n        />\n      </div>\n      <p>({movie.Year})</p>\n    </div>\n  );\n};\n\n\nexport default Movie;","import React, { useState } from \"react\";\n\nconst Search = (props) => {\n//in the past, in order to handle internal state, we would have to create a class component\n//with hooks we can have a functional component handle its own internal state\n  const [searchValue, setSearchValue] = useState(\"\");//useState is a hooks API, accepts one argument which is the initial state, and then it returns an array containing the current state????\n  const handleSearchInputChanges = (e) => {\n    setSearchValue(e.target.value);//e输入框中的值给searchValue\n  }\n\n  const resetInputField = () => {\n    setSearchValue(\"\")//重制\n  }\n\n  const callSearchFunction = (e) => {\n    e.preventDefault();\n    props.search(searchValue);\n    resetInputField();\n  }\n\n  return (\n      <form className=\"search\">\n        <input\n          value={searchValue}\n          onChange={handleSearchInputChanges}\n          type=\"text\"\n        />\n        <input onClick={callSearchFunction} type=\"submit\" value=\"SEARCH\" />\n      </form>\n    );\n}\n\nexport default Search;","import React, { useReducer, useEffect } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport Movie from \"./Movie\";\nimport Search from \"./Search\";\n\nconst MOVIE_API_URL = \"https://www.omdbapi.com/?s=man&apikey=4a3b711b\"; // you should replace this with yours\n\nconst initialState = {\n  loading: true,\n  movies: [],\n  errorMessage: null\n};\n\nconst reducer = (state, action) => {//reducer：根据action不同，怎么改state//redux\n  switch (action.type) {\n    case \"SEARCH_MOVIES_REQUEST\"://action\n      //updates our state object\n      return {\n        ...state,//改state\n        loading: true,\n        errorMessage: null\n      };\n    case \"SEARCH_MOVIES_SUCCESS\":\n      //dispatch another action with the type SEARCH_MOVIES_SUCCESS that updates our state object making loading=false and movies = action.payload where the payload is the movies array gotten from OMDB.\n      return {\n        ...state,\n        loading: false,\n        movies: action.payload\n      };\n    case \"SEARCH_MOVIES_FAILURE\":\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.error\n      };\n    default:\n      return state;\n  }\n};\n\n//the second hooks API: useEffect\n    /*\n    useEffect Hook as componentDidMount, componentDidUpdate, and componentWillUnmount combined\n    perform side effects as data fetching, subscriptions, and manual DOM manipulations\n    */\n   //after 1st render componentDidMount and every update componentDidUpdate\n   /* useEffect 相当于：\n   // for class components\n      componentDidUpdate(prevProps, prevState) {\n        if (prevState.count !== this.state.count) {\n          document.title = `You clicked ${this.state.count} times`;\n        }\n      }\n  // using hooks it will become\n      useEffect(() => {\n        document.title = `You clicked ${count} times`;\n      }, [count]); // Only re-run the effect if count changes\n   */\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n    useEffect(() => {\n        fetch(MOVIE_API_URL)\n            .then(response => response.json())\n            .then(jsonResponse => {\n        \n            dispatch({\n                type: \"SEARCH_MOVIES_SUCCESS\",\n                payload: jsonResponse.Search\n        \t});\n      \t});\n  \t}, []);\n\n    const search = searchValue => {\n    \tdispatch({\n      \ttype: \"SEARCH_MOVIES_REQUEST\"\n    \t});\n        fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`)\n      \t.then(response => response.json())\n      \t.then(jsonResponse => {\n        \tif (jsonResponse.Response === \"True\") {\n          \tdispatch({\n                type: \"SEARCH_MOVIES_SUCCESS\",\n                payload: jsonResponse.Search//action -> object\n          \t});\n        \t} else {\n          \tdispatch({\n                type: \"SEARCH_MOVIES_FAILURE\",\n                error: jsonResponse.Error\n          \t});\n          }\n      \t});\n\t  };\n\n    const { movies, errorMessage, loading } = state;\n\n    return (\n    <div className=\"App\">\n      <Header text=\"MOVIE HUB\" />\n      <Search search={search} />\n      <p className=\"App-intro\">Sharing a few of our favourite movies</p>\n      <div className=\"movies\">\n        {loading && !errorMessage ? (\n          <span>loading... </span>\n        ) : errorMessage ? (\n          <div className=\"errorMessage\">{errorMessage}</div>\n        ) : (\n          movies.map((movie, index) => (\n            <Movie key={`${index}-${movie.Title}`} movie={movie} />\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';//changed\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}