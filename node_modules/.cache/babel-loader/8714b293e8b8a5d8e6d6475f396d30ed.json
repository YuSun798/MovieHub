{"ast":null,"code":"var _jsxFileName = \"/Users/sunyu/Desktop/Projects/MovieHub/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, useEffect } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport Movie from \"./Movie\";\nimport Search from \"./Search\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MOVIE_API_URL = \"https://www.omdbapi.com/?s=man&apikey=4a3b711b\"; // you should replace this with yours\n\nconst initialState = {\n  loading: true,\n  movies: [],\n  errorMessage: null\n};\n\nconst reducer = (state, action) => {\n  //reducer：根据action不同，怎么改state\n  switch (action.type) {\n    case \"SEARCH_MOVIES_REQUEST\":\n      //action\n      //updates our state object\n      return { ...state,\n        //改state\n        loading: true,\n        errorMessage: null\n      };\n\n    case \"SEARCH_MOVIES_SUCCESS\":\n      //dispatch another action with the type SEARCH_MOVIES_SUCCESS that updates our state object making loading=false and movies = action.payload where the payload is the movies array gotten from OMDB.\n      return { ...state,\n        loading: false,\n        movies: action.payload\n      };\n\n    case \"SEARCH_MOVIES_FAILURE\":\n      return { ...state,\n        loading: false,\n        errorMessage: action.error\n      };\n\n    default:\n      return state;\n  }\n}; //the second hooks API: useEffect\n\n/*\nuseEffect Hook as componentDidMount, componentDidUpdate, and componentWillUnmount combined\nperform side effects as data fetching, subscriptions, and manual DOM manipulations\n*/\n//after 1st render componentDidMount and every update componentDidUpdate\n\n/* useEffect 相当于：\n// for class components\n   componentDidUpdate(prevProps, prevState) {\n     if (prevState.count !== this.state.count) {\n       document.title = `You clicked ${this.state.count} times`;\n     }\n   }\n// using hooks it will become\n   useEffect(() => {\n     document.title = `You clicked ${count} times`;\n   }, [count]); // Only re-run the effect if count changes\n*/\n\n\nconst App = () => {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => {\n    fetch(MOVIE_API_URL).then(response => response.json()).then(jsonResponse => {\n      dispatch({\n        type: \"SEARCH_MOVIES_SUCCESS\",\n        payload: jsonResponse.Search\n      });\n    });\n  }, []);\n\n  const search = searchValue => {\n    dispatch({\n      type: \"SEARCH_MOVIES_REQUEST\"\n    });\n    fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`).then(response => response.json()).then(jsonResponse => {\n      if (jsonResponse.Response === \"True\") {\n        dispatch({\n          type: \"SEARCH_MOVIES_SUCCESS\",\n          payload: jsonResponse.Search\n        });\n      } else {\n        dispatch({\n          type: \"SEARCH_MOVIES_FAILURE\",\n          error: jsonResponse.Error\n        });\n      }\n    });\n  };\n\n  const {\n    movies,\n    errorMessage,\n    loading\n  } = state;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      text: \"MOVIE HUB\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Search, {\n      search: search\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"App-intro\",\n      children: \"Sharing a few of our favourite movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movies\",\n      children: loading && !errorMessage ? /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"loading... \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this) : errorMessage ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"errorMessage\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this) : movies.map((movie, index) => /*#__PURE__*/_jsxDEV(Movie, {\n        movie: movie\n      }, `${index}-${movie.Title}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sunyu/Desktop/Projects/MovieHub/src/components/App.js"],"names":["React","useReducer","useEffect","Header","Movie","Search","MOVIE_API_URL","initialState","loading","movies","errorMessage","reducer","state","action","type","payload","error","App","dispatch","fetch","then","response","json","jsonResponse","search","searchValue","Response","Error","map","movie","index","Title"],"mappings":"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","sourcesContent":["import React, { useReducer, useEffect } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport Movie from \"./Movie\";\nimport Search from \"./Search\";\n\nconst MOVIE_API_URL = \"https://www.omdbapi.com/?s=man&apikey=4a3b711b\"; // you should replace this with yours\n\nconst initialState = {\n  loading: true,\n  movies: [],\n  errorMessage: null\n};\n\nconst reducer = (state, action) => {//reducer：根据action不同，怎么改state\n  switch (action.type) {\n    case \"SEARCH_MOVIES_REQUEST\"://action\n      //updates our state object\n      return {\n        ...state,//改state\n        loading: true,\n        errorMessage: null\n      };\n    case \"SEARCH_MOVIES_SUCCESS\":\n      //dispatch another action with the type SEARCH_MOVIES_SUCCESS that updates our state object making loading=false and movies = action.payload where the payload is the movies array gotten from OMDB.\n      return {\n        ...state,\n        loading: false,\n        movies: action.payload\n      };\n    case \"SEARCH_MOVIES_FAILURE\":\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.error\n      };\n    default:\n      return state;\n  }\n};\n\n//the second hooks API: useEffect\n    /*\n    useEffect Hook as componentDidMount, componentDidUpdate, and componentWillUnmount combined\n    perform side effects as data fetching, subscriptions, and manual DOM manipulations\n    */\n   //after 1st render componentDidMount and every update componentDidUpdate\n   /* useEffect 相当于：\n   // for class components\n      componentDidUpdate(prevProps, prevState) {\n        if (prevState.count !== this.state.count) {\n          document.title = `You clicked ${this.state.count} times`;\n        }\n      }\n  // using hooks it will become\n      useEffect(() => {\n        document.title = `You clicked ${count} times`;\n      }, [count]); // Only re-run the effect if count changes\n   */\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n    useEffect(() => {\n        fetch(MOVIE_API_URL)\n            .then(response => response.json())\n            .then(jsonResponse => {\n        \n            dispatch({\n                type: \"SEARCH_MOVIES_SUCCESS\",\n                payload: jsonResponse.Search\n        \t});\n      \t});\n  \t}, []);\n\n    const search = searchValue => {\n    \tdispatch({\n      \ttype: \"SEARCH_MOVIES_REQUEST\"\n    \t});\n\t\n        fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`)\n      \t.then(response => response.json())\n      \t.then(jsonResponse => {\n        \tif (jsonResponse.Response === \"True\") {\n          \tdispatch({\n                type: \"SEARCH_MOVIES_SUCCESS\",\n                payload: jsonResponse.Search\n          \t});\n        \t} else {\n          \tdispatch({\n                type: \"SEARCH_MOVIES_FAILURE\",\n                error: jsonResponse.Error\n          \t});\n          }\n      \t});\n\t  };\n\n    const { movies, errorMessage, loading } = state;\n\n    return (\n    <div className=\"App\">\n      <Header text=\"MOVIE HUB\" />\n      <Search search={search} />\n      <p className=\"App-intro\">Sharing a few of our favourite movies</p>\n      <div className=\"movies\">\n        {loading && !errorMessage ? (\n          <span>loading... </span>\n        ) : errorMessage ? (\n          <div className=\"errorMessage\">{errorMessage}</div>\n        ) : (\n          movies.map((movie, index) => (\n            <Movie key={`${index}-${movie.Title}`} movie={movie} />\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}